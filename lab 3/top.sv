
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module top (

	//////////// CLOCK //////////
	input 		          		CLOCK_50,
	input 		          		CLOCK2_50,
	input 		          		CLOCK3_50,

	//////////// LED //////////
	output		     [8:0]		LEDG,
	output		    [17:0]		LEDR,

	//////////// KEY //////////
	input 		     [0:0]		KEY,

	//////////// SW //////////
	input 		    [17:0]		SW,

	//////////// SEG7 //////////
	output		     [6:0]		HEX0,
	output		     [6:0]		HEX1,
	output		     [6:0]		HEX2,
	output		     [6:0]		HEX3,
	output		     [6:0]		HEX4,
	output		     [6:0]		HEX5,
	output		     [6:0]		HEX6,
	output		     [6:0]		HEX7
);

logic [31:0] cpu_output, cpu_input;
//=======================================================
//  REG/WIRE declarations
//=======================================================

	/* 24 bit clock divider, converts 50MHz clock signal to 2.98Hz */
	logic [23:0] clkdiv;
	logic ledclk;
	assign ledclk = clkdiv[23];

	/* driver for LEDs */
	logic [25:0] leds;
	assign LEDR = leds[25:8];
	assign LEDG = leds[7:0];

	/* LED state register, 0 means going left, 1 means going right */
	logic ledstate;


//=======================================================
//  Structural coding
//=======================================================


	initial begin
		clkdiv = 26'h0;
		/* start at the far right, LEDG0 */
		leds = 26'b1;
		/* start out going to the left */
		ledstate = 1'b0;
	end

	always @(posedge CLOCK_50) begin
		/* drive the clock divider, every 2^26 cycles of CLOCK_50, the
		* top bit will roll over and give us a clock edge for clkdiv
		* */
		clkdiv <= clkdiv + 1;
	end

	always @(posedge ledclk) begin
		/* going left and we are at the far left, time to turn around */
		if ( (ledstate == 0) && (leds == 26'b10000000000000000000000000) ) begin
			ledstate <= 1;
			leds <= leds >> 1;

		/* going left and not at the far left, keep going */
		end else if (ledstate == 0) begin
			ledstate <= 0;
			leds <= leds << 1;

		/* going right and we are at the far right, turn around */
		end else if ( (ledstate == 1) && (leds == 26'b1) ) begin
			ledstate <= 0;
			leds <= leds << 1;

		/* going right, and we aren't at the far right */
		end else begin
			leds <= leds >> 1;
		end
	end
	
// CSCE 611 - Ethan Hang - Copyright 2022

assign cpu_input = {14'b0, SW};		// 32-bit input concat with switch value

// cpu instance
	cpu mycpu(.clk(CLOCK_50), .rst_n(KEY[0]), .GPIO_in(cpu_input), .GPIO_out(cpu_output));

// hex driver instance
	hexdriver SEG0(cpu_output[3:0], HEX7);  // F, 1111
	hexdriver SEG1(cpu_output[7:4], HEX6);  // F, 1111
	hexdriver SEG2(cpu_output[11:8], HEX5);  // F, 1111
	hexdriver SEG3(cpu_output[15:12], HEX4);  // F, 1111
	hexdriver SEG4(cpu_output[19:16], HEX3);  // 3, 0011
	hexdriver SEG5(cpu_output[23:20], HEX2);  // input = 0 ,display 0
	hexdriver SEG6(cpu_output[27:24], HEX1);  // input = 0, display 0
	hexdriver SEG7(cpu_output[31:28], HEX0);  // input = 0, display 0
	
endmodule
